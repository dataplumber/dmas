~~ Copyright 2007, by the California Institute of Technology.
~~ ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged.
~~
~~ $Id: index-0.2.0.apt 6223 2010-11-11 23:16:17Z thuang $

  ---
  Release Description 0.2.0
  ---
  Sean Hardman
  ---
  
Release Description 0.2.0

  This release of the Ingest Program Set is a component of the first integrated release ({{{../../cm/release/index-0.1.0.html}0.1.0}}) of the Next Generation PO.DAAC Data Management System. This release is intended as a test release and not an operational release.

  Building on capabilities delivered in the last release, this release focuses on the integration with the Inventory program set. Details on this release can be found in the following sections of this document:

  * {{{Capabilities}Capabilities}}

  * {{{Liens}Liens}}

  * {{{Installation}Installation}}

  * {{{Operation}Operation}}

  * {{{Appendix_A_-_Requirements_Support}Appendix A - Requirements Support}}

  * {{{Appendix_B_-_Test_Status}Appendix B - Test Status}}

{Capabilities}

  This section details the new, modified and corrected capabilities that comprise this release of the Ingest Program Set. In lieu of listing the capabilities by requirement they have been summarized. For a complete list of the requirements and their support status, see {{{Appendix_A_-_Requirements_Support}Appendix A}}.

* New Capabilities

  The following capabilities are new for this release:

  * Metadata Registration

  Metadata pertaining to granules contained in a Submission Information Package (SIP) is passed to the Inventory program set via the Application Program Interface (API) and inserted into the database.

* Modified Capabilities

  The following capabilities have been modified for this release:

  * Revised Submission Information Package

  Revisions were made to the SIP message definition for several reasons.  First was to follow a consistent naming scheme to better reflect the backend data model.  Second was to introduce addtional metadata tracking fields to be used by Inventory in upcoming releases.  Third was to provide consistent naming between the XML elements and their corresponding Java Binding APIs.

  * Revised Message Binding Implementation

  XML messages handled by the Ingest Program Set are now using the standard Java XML Binding technology to simplfy data mapping and improve error detection during compilation time.

  * Revised Servlet Client

  The <PackageSender> servlet now requires user login information to connect to the backend Java Message Service.  This release also added automatic file type detection to the servlet.  The user can now upload the SPM/SIP file without having to specify the file type in the browser.

* Corrected Capabilities

  The following capabilities have been corrected for this release:

  * Updated Staging Area Directory Structure

  In the previous release, the Ingest Server adopted the structure <YYYY/MM/DD> to group daily ingested batches.  The problem is there will be multiple batches to be ingested on a given day.  Putting all batches under the same directory might be problematic when it comes to duplicate file names.  This release adopts an improved structure using <YYYY/MM/DD/XXXX> as the directory for each batch where <XXXX> is a 4-digit batch number generated by the Ingest Server.  This improvement will prevent accidental overwrites when two batches contain duplicate file names.  This new implementation assumes file names are unique within a given batch.

  * Renamed Client Application <notify> to <activenotify>

  The application name of <notify> conflicted with the default Linux <notify> command.

{Liens}

  This section details the liens against the capabilities that have yet to be implemented or are partially implemented. In lieu of listing the liens by requirement they have been summarized. For a complete list of the requirements and their support status, see {{{Appendix_A_-_Requirements_Support}Appendix A}}.

  * Integration with Core Program Sets

  Integration with Archive and Generate has not been implemented.

  * Electronic Data Retrieval

  Support for direct push and pull via FTP without being triggered by an SPM or SIP has not been implemented yet. These capabilities are all lumped under <L3.158>.

  * Data Verification

  Neither of the verification capabilities specified by <L3.166>, <L3.167> nor <L3.168> have been implemented.

  * Metadata Extraction

  Neither of the metadata extraction capabilities specified by <L3.174> nor <L3.175> have been implemented.

  * Agreed/Standard Interfaces

  Need to determine how to satisfy <L3.258>, but implementation of <L3.259> is well on the way.

  * Secondary Failover

  Running more than one instance of Ingest, as specified in <L3.270> has not been tested yet.

  * Request Transmission/Retransmission

  Neither capabilities specified by <L3.293> nor <L3.294> have been implemented.

  * L3.170

  Two of the elements listed in this requirement have been interpreted differently from the original intention. They are:

    * e. Status of granule push (optional)

      Instead of having a separate status value for each granule, a status value has been assigned for each ingested package which may contain one or more granules. If one granule fails, the whole package will be rejected. Suggest removing this element from the requirement.

    * f. Transfer time of granule to external destination host (optional)

      Instead of tracking the time to transfer to the destination host, this element will track the time to transfer from the source host. Suggest rewording this element.

  A request will be made to the System Engineer to reword this requirement.

{Installation}

  This section details the system requirements and procedures for installing and configuring the software in this program set.

* System Requirements

  The software contained in this program set was developed using Java and will run on any platform with a supported Java Runtime Environment (JRE). The software was specifically developed under Sun Java version 1.5 and has only been tested with this version.

  * PO.DAAC Standard Computing Environment

  This will eventually be documented on the Wiki and linked to in future releases. For now, the following software and tools should be available in the current environment:

    * Sun Java Standard Edition (J2SE) 1.5.X

    * Perl 5.X

    * Subversion Client 1.3.X

    * FTP Client/Server

[]

  * JBoss Application Server

  The Ingest Program Set requires an instance of the JBoss Application Server to be installed, configured for PO.DAAC and running in the current environment. In order to satisfy this requirement, the administrator should following the procedure detailed in the {{{../jboss/index.html}JBoss Application Server}} document.

  For this release, it is not necessary to reinstall the JBoss Application Server, but there are some configuration changes to be made. These changes should be performed as follows:

    * Shutdown the JBoss Application Server as detailed in the {{{../jboss/index.html#Shutting Down JBoss Server}Shutting Down JBoss Server}} section of the document.

    * Perform the database-related configuration as detailed in the {{{../jboss/index.html#Customization for PO.DAAC Ingest}Customization for PO.DAAC Ingest}} section of the document.

    * Secure the JMX-Console and Web-Console interfaces as detailed in the {{{../jboss/index.html#Securing The JMX-Console and Web-Console}Securing The JMX-Console and Web-Console}} section of the document. This step is optional. It could also be performed later.

    * Restart the JBoss Application server as detailed in the {{{../jboss/index.html#Starting JBoss Server}Starting JBoss Server}} section of the document.

* Ingest-Server Installation

  The Ingest Server module consists of the core implementation for the program set (everything happens here). The installation of this module is covered in the {{{../ingest-server/install/index.html}Ingest Server Installation}} document.

* Ingest-Client Installation

  The Ingest Client module consists of command-line applications for interfacing with the Ingest Server and the Java Message Service (JMS). The installation of this module is covered in the {{{../ingest-client/install/index.html}Ingest Client Installation}} document.

* Ingest-Web Installation

  The Ingest Web module consists of a Servlet and a simple web application for interfacing with the Ingest Server via the Java Message Service (JMS). The installation of this module is covered in the {{{../ingest-web/install/index.html}Ingest Web Installation}} document.

{Operation}

  This section details any necessary setup and the commands for running the software in this program set.

* Ingest-Server Operation

  The operation of this module is covered in the {{{../ingest-server/operate/index.html}Ingest Server Operation}} document.

* Ingest-Client Operation

  The operation of this module is covered in the {{{../ingest-client/operate/index.html}Ingest Client Operation}} document.

* Ingest-Web Operation

  The operation of this module is covered in the {{{../ingest-web/operate/index.html}Ingest Web Operation}} document.

{Appendix A - Requirements Support}

  The capabilities in this release are detailed in the table below based on the requirements specified in the {{{https://bravo-lib.jpl.nasa.gov/docushare/dsweb/Get/Document-279402/PO.DAAC_Reqs_20070726.xls}PO.DAAC User and System Requirements}} document. The allocation of the Level 3 system requirements to the program sets is captured in the {{{https://bravo-lib.jpl.nasa.gov/docushare/dsweb/Get/Document-407255/podaac_req_alloc_20070917.xls}Level 3 Requirements Allocation}} document. The values for the Support column are defined as follows:

  * <<Full>> - The capability specified by the associated requirement has been implemented and tested at the program set level.

  * <<Partial>> - The capability has been partially implemented. The content of the Description column should provide more details.

  * <<No>> - The capability has not yet been implemented.

[]

*--+++
| <<Requirement>> | <<Support>> | <<Description>> |
*--+++
| L3.158 The PO.DAAC shall acquire data electronically. |  Partial | Supports retrieval of data via FTP when triggered by the receipt of a Submission Package Message (SPM). |
*--+++
| L3.160 The PO.DAAC shall provide remote event handling (i.e. handshaking) to initiate data transfer from the data provider. | Partial | SPMs and SIPs are accepted via TCP/IP or Java Message Service (JMS). |
*--+++
| L3.161 The PO.DAAC shall acknowledge receipt of data (e.g. receipt confirmation notification (RCN), as directed by provider. | Partial | An e-mail is sent to the specified sender of the SPM or SIP acknowledging receipt as well as completion of ingestion. |
*--+++
| L3.164 The PO.DAAC shall log/capture all transmission anomalies. | Partial | All messages generated during an ingestion are captured in a log file. The severity level is configurable. |
*--+++
| L3.166 The PO.DAAC shall verify data for readability. | No | Verification beyond checksum generation has not been addressed yet. |
*--+++
| L3.167 The PO.DAAC shall verify granule data with appropriate checksum information. | Partial | A checksum value is generated for each file ingested. |
*--+++
| L3.168 The PO.DAAC shall capture all verification results. | No | Not been addressed yet. |
*--+++
| L3.170 The PO.DAAC shall register and maintain the following information for every acquired granule:
a. Granule Name.
b. Granule size (Mbytes)
c. Receipt time.
d. Data stream name
e. Status of granule push (optional)
f. Transfer time of granule to external destination host (optional)
g. Checksum value. | Full | The specified elements map to the following elements in the SIP within the <ingestibleFileList.fileIngestible> element except for <e.> which is within the <ingestiblePackageListType.ingestiblePackage> element: (a. metadata.granuleName, b. ingestDetails.size, c. ingestDetails.ingestTime, d. metadata.datasetName, e. ingestiblePackage.status, f. ingestDetails.ingestTime, g. ingestDetails.checksum). |
*--+++
| L3.174 The PO.DAAC shall extract metadata information from data granules when necessary. | No | Extracting metadata from granule data files has not been addressed yet. |
*--+++
| L3.175 The PO.DAAC shall extract content-based information from data granules (e.g. quality, statistical analysis, etc.) | No | Extracting metadata from granule data files has not been addressed yet. |
*--+++
| L3.258 The PO.DAAC shall acquire data via an agreed upon interface described in the Interface Control Document (ICD) or Memorandum Of Understanding (MOU) in cooperation with external entities (i.e., projects, foreign data centers and principal investigators), when and where appropriate. | Partial | I believe this requirement specifies that an ICD or MOU must be in place before data is acquired. If that is the case, then it is not much of a software requirement. |
*--+++
| L3.259 The PO.DAAC shall have a set of standard interfaces to select from to initiate negotiation with data provider. | Partial | The SIP provides the structure of the metadata along with the TCP/IP and JMS communication mechanisms lay the groundwork for meeting this requirement. |
*--+++
| L3.270 The PO.DAAC shall provide secondary fail-over systems in support of the acquisition and receipt of data. | No | Fail-over and scalability have not directly been addressed yet. |
*--+++
| L3.181 The PO.DAAC shall produce metadata satisfying minimum quality standards. | Partial | Not sure how we will ever prove complete satisfaction of this requirement but the information captured in the SIP is a good start. |
*--+++
| L3.293 The PO.DAAC shall report verification results and request retransmission in the event of an anomaly. | No | Not been addressed yet. |
*--+++
| L3.294 The PO.DAAC shall request transmission or retransmission in the event of an anomaly. | No | Not been addressed yet. |
*--+++
| L3.324 The PO.DAAC shall manage the processing history and source of data products. | No | For Ingest, this will be addressed in the SIP structure. |
*--+++

{Appendix B - Test Status}

* Unit Tests

  The results of unit testing prior to deployment can be found in the Maven Surefire Report for the associated module. Descriptions of the unit tests for the associated module can be found in the Test JavaDocs. The following modules have associated units tests:

** Ingest Commons Module

  * {{{../ingest-commons/surefire-report.html}Maven Surefire Report}}

  * {{{../ingest-commons/testapidocs/index.html}Test JavaDocs}}

** Ingest API Module

  * {{{../ingest-api/surefire-report.html}Maven Surefire Report}}

  * {{{../ingest-api/testapidocs/index.html}Test JavaDocs}}

* Program Set Tests

  The following test scenarios were performed prior to deployment using various test data inputs.

** Testing SPM submission over TCP and verify file ingestion

  * Start the Ingest server in debug mode and making sure it is listening on the predefined TCP port (using <<<% netstat -an | grep <port number> >>>)

  * Run <<<spmsubmit>>> to submit one of the QuikSCAT SPM files (e.g. spa.0.testbed) using <<<'-c TCP'>>> to specify the communication method.

  * Run <<<activenotify>>> to subscribe to <<<SIP_COMPLETE>>> topic.

  * Verification

    * No error messages echo on the client terminal.  This indicates the client was able to successfully translate the input SPM into a SIP and performed XML validation on the translated SIP (in memory).  The client was also able to establish a connection to the server via a TCP connection.  The SIP was compressed on-the-fly and streamed to the server where MD5 checksum was being computed by both the client and the server processes and validated at the end of transmission.

    * Server echoes debug message by dumping octet and sends acknowledgement back to the client software.  The client software should exit gracefully.

    * Email sent to contributor of SPM to acknowledge the SIP has been received when the server is able to write the SIP into its <<<sip/post>>> directory.  The acknowledgement email also contains the automatic generated batch number for the submission.

    * Verify the server debug log to see file transfer is being carried out when the server is ready to process the SIP.

    * Upon successful ingestion of all files, the server updates the original SIP with ingestion details (such as staging location and computed checksum) and moves the SIP into its <<<sip/complete>>> directory.  An email is sent to the contributor on the successful ingestion of all files.  Also verify retrieved files are written to <<<staging/YYYY/MM/DD/XXXX>>> directory, where <<<XXXX>>> is the generated batch number.

    * A complete SIP is echo at the <<<activenotify>>> terminal.

** Testing SPM submission over JMS and verify file ingestion

  * Similar to the test above except specify <<<'-c JMS'>>> as the communication method.

  * Run <<<activenotify>>> to subscribe to <<<SIP_COMPLETE>>> topic.

  * Verification

    * No error messages echo on the client terminal.  This indicates the client was able to successfully translate the input SPM into a SIP and preformed XML validation on the translated SIP (in memory).  The client was also able to perform JNDI lookup of the SIP post JMS topic and establish a connection to the JMS topic (on JBoss).  The SIP was compressed on-the-fly and attached as the body of the JMS message with the computed MD5 checksum in the header of the message. 

    * Server echoes debug message by dumping the contents of the JMS message, computes the MD5 checksum to validate the integrity of the message content, decompresses the binary content, and created a ServiceProfile object (SIP represented in Java).

    * The Ingest server places the received SIP in its <<<sip/post>>> directory.  The contributor of the SIP should receive an acknowledgement email sent by the Ingest server.  The acknowledgement email also contains the automatic generated batch number for the submission.

    * Verify the server debug log to see file transfer is being carried out when the server is ready to process the SIP.

    * Upon successful ingestion of all files, the server updates the original SIP with ingestion details (such as staging location and computed checksum) and moves the SIP into its <<<sip/complete>>> directory.  An email is sent to the contributor on the successful ingestion of all files.  Also verify retrieved files are written to <<<staging/YYYY/MM/DD/XXXX>>> directory, where <<<XXXX>>> is the generated batch number.

    * A complete SIP is echo at the <<<activenotify>>> terminal.

** Testing SIP submission with Inventory integration

  * Repeat the above two tests using <<<sipsubmit>>> with MODIS SIP file.

  * Since MODIS SIP also contains Granule data.  The verification also include querying the Oracle database for the contents of the <<<GRANULE>>> and <<<GRANULE_REAL>>> tables.

+--
SELECT 
    GRANULE_ID, 
    DATASET_ID, 
    NAME, 
    START_TIME, 
    STOP_TIME, 
    INGEST_TIME, 
    CREATE_TIME, 
    VERSION, 
    ACCESS_TYPE, 
    STATUS 
FROM 
    GRANULE;
+--

+--
SELECT 
    GRANULE_ID, 
    ELEMENT_ID, 
    VALUE 
FROM 
    GRANULE_REAL
+--
