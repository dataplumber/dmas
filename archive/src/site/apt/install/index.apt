~~ Copyright 2008-2009, by the California Institute of Technology.
~~ ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged.
~~
~~ $Id: index.apt 6268 2010-11-13 07:27:48Z gangl $

  ---
  Installation
  ---
  Cynthia Wong, Sean Hardman
  ---
  
Installation

  This document describes how to install and configure the Archive program set. The following sections can be found in this document:

  * {{{Distribution_Contents}Distribution Contents}}

  * {{{Setup_Verification}Setup Verification}}

  * {{{Configuration}Configuration}}

  * {{{Archive_Structure_Creation}Archive Structure Creation}}

  * {{{Setup_SSH_Public_Key}Setup SSH Public Key}}


{Distribution Contents}

  The program set is packaged in a self-contained TAR/GZIP file. The package can be extracted with the following command (where X.X.X is the current version):

+--
% tar -xzvf archive-X.X.X-archive.tar.gz
+--

  Below is an illustration of the distribution after it has been extracted:

[../images/archive_dist.jpg]

  The contents of the package are as follows:

  * <<<bin>>> - Directory containing the client executables.

    * <<<aipsubscribe.sh>>> - Script for subscribing to the message bus for AIP message postings. Receipt of an AIP triggers the archive process.

    * <<<archive_GHRSST_Reconciliation.sh>>> - Script for GHRSST Reconciliation used to reconcile checksum and file size differences between local or remote files and the information stored in the database.

    * <<<archive_tool.sh>>> - Script for archive command-line tool to manipulate the archive data & inventory metadata.

    * <<<archivemonitor.sh>>> - Script for monitoring the message bus to capture messages posted to the <aip/complete> topic.
    
    * <<<daemon.sh>>> - Script for launching a service as a background process. This script is called by the <aipsubscribe.sh> script.

  * <<<config>>> - Directory containing the configuration files.

    * <<<archive>>> - Directory containing the script for setting up a test environment.

      * <<<archive_location.pl>>> - Script for creating a local archive directory structure. It also updates the database to reference this local structure.

    * <<<archive.config>>> - Configuration file containing properties used by Archive Program Set.

    * <<<archive.log.properties>>> - Configuration file containing logging properties.
    
    * <<<archivemonitor.log.properties>>> - Configuration file containing logging properties for archivemonitor program.

    * <<<hibernate.cfg.xml>>> - Configuration file containing properties used by Inventory API with Hibernate implementation.

  * <<<lib>>> - Directory containing the run-time libraries for the executables.

{Setup Verification}

  After the distribution package has been extracted and its contents moved to the target delivery directory, verify the setup in the configuration files located in the <config> directory. This can be accomplished with the following commands (assuming the target directory was </usr/local/daac>):

+--
% cd /usr/local/daac/config
% more archive.config

log4j.configuration=file:///usr/local/daac/config/archive.log.properties
inventory.hibernate.config.file=/usr/local/daac/config/hibernate.cfg.xml
java.naming.provider.url=jnp://lanina.jpl.nasa.gov:1099
jms.username=jusername
jms.password=jpassword
topic.aip.post=topic/podaac/aip/post
topic.aip.status=topic/podaac/aip/complete
topic.aip.ack=topic/podaac/aip/ack
archive.trash=/usr/local/daac/temp/archive-trash

% more archive.log.properties
 ...
log4j.appender.file.File=/usr/local/daac/logs/archive.log
 ...

% more archivemonitor.log.properties
 ...
log4j.appender.file.File=/usr/local/daac/logs/archivemonitor.log
 ...
 
% more hibernate.cfg.xml
 ...
<property name="connection.url">jdbc:oracle:thin:@seadb.jpl.nasa.gov:1526:DAACDEV</property>
<property name="connection.username">dbusername</property>
<property name="connection.password">dbpassword</property>
 ...
+--

  The values in the example above represent the default values. Your values should represent the results of your actions performed during setup as described in the {{{../compile/index.html#Setup}Setup}} section of the {{{../compile/index.html}Compilation}} document.

{Configuration}

  The only configuration required is to setup the user's environment in order to execute the archive structure creation script. This script requires the Oracle Client to be installed and accessible from the user's machine, if the user chooses to execute the database upate option. The environment variables should be set as follows:

+--
ORACLE_BASE = /home/oracle
ORACLE_HOME = /home/oracle/product/10gR2
PATH = /home/oracle/product/10gR2/bin
LD_LIBRARY_PATH = /home/oracle/product/10gR2/lib
+--

  In the case of the <PATH> and <LD_LIBRARY_PATH> variables, the above path values may be one of many paths defined for those variables. If the above variables are not set appropriately, the user can set their environment with the following command:

+--
% source /etc/local.login
+--

{Archive Structure Creation}

  When executing the Archive software in any environment, except for the Operations environment, an archive directory structure needs to be created in order to have a place to move the ingested product files to after they have been staged by the Ingest program set. The <archive_location.pl> script will create this directory structure wherever the user would like it created. The script will also give the user the option to update the database with these directory locations. If the user opts for the database update, the user must have an Oracle Database user name for this installation, please contact the database administrator for a user name.

  The script must be executed from a directory where the user has write privileges because the script will generate a SQL script and a log file in the current working directory. One way to accomplish this is to create a working directory in the user's local area where the script can be copied to and executed from. For the purposes of the example below, it is assumed that the working directory is named <archive_loc> and is located in the user's home directory. It is also assumed that the Perl script provided in the distribution has been copied into this directory.

  The Perl script <archive_location.pl>, will prompt the user for one or four options depending on whether the user opts to perform the database update as well. The options are as follows:



 * Root Directory 
 	* This is the root directory specification where the user would like the archive directory structure to be created. This should be an absolute path specification that already exists. 
 * Oracle SID 
 	* This is the Oracle System Identifier (SID) which identifies the Oracle database instance with which to connect. PO.DAAC currently has two instances identified by <DAACDEV> and <DAACOPS>. The value is not case sensitive. 
 * Username 
 	* The Oracle user account name that identifies the owner of the database objects to be created, dropped or manipulated by the specified action. 
 * Password 
 	* The password that corresponds with the Oracle user account name. If the password contains special characters, each special character should be preceded by a <\\> character when entering the password. The password is not echoed to the terminal. 


  In order to update the database with the new directory locations, the database schema must have been created and populated as specified in the Inventory {{{../../inventory/install/index.html}Installation}} document. The example follows:

+--
% cd archive_loc
% ./archive_location.pl

Executing script archive_location.pl.

Specify the root directory where you would like
the archive directory structure created. Please
enter an absolute path specification that exists.

Root Directory: /home/user/test

Would you also like to update the archive policy
in the database? This requires sqlplus to be in
your executable path.

Database Update [y|n] {y}: y

Oracle SID: DAACDEV

Username: <username>

Password: 

Are these the correct parameter(s)?
--------------------------------------------------------
Root Directory:   /home/user/test
Oracle SID:       DAACDEV
Username:         <username>
--------------------------------------------------------

Accept Parameters [y|n] {y}: y

Performing the archive directory creation.

Successfully created the archive directory structure.

Performing the database update.

The operation appears to have completed successfully.

For more information view the log file:
  ./archive_loc/archive_location_080304223017.log

The archive_location.pl script has completed.

%
+--

  In the example above, the operation completed successfully. If there were errors or warnings that occurred during the operation, the message will state that fact. In either case the user may want to view the log file, which will be named with a timestamp as in the example above. 

  If the user opts to not perform the database update, an SQL script will be generated that can be executed via one of the applications that are detailed in the Inventory {{{../../inventory/operate/index.html}Operation}} document.

{Setup SSH Public Key}

  The Archive Program Set is implemented to use sftp transfer method with Secure Shell(SSH) public key authentication. 
Therefore, in order to execute <aipsubscribe.sh>, ssh public key setup must be established. 
Here is the instruction for setting up ssh public key between two computers, <$\{CLIENT\}> and <$\{SERVER\}>.
Note that the instruction here works only on computers with <"OpenSSH"> specific installed.

  * <<Key Generation>>

  The key generation can be done with the ssh-keygen utility.

    * login <$\{CLIENT\}>

+--
client% cd ~/.ssh
client% ssh-keygen -P '' -t dsa
+--

  This command generates a public key file, <~/.ssh/id_dsa.pub>.

  * <<Key Distribution>>

  The public key file must be copied to any server that will be accessed by the client.

    * copy the public key file onto server side

+--
client% scp ~/.ssh/id_rsa.pub ${SERVER}:~/.ssh/archive-server.pub
+--

    * login <$\{SERVER\}>

+--
server% cd ~/.ssh
server% cat archive-server.pub >> authorized_keys
server% chmod 600 ~/.ssh/authorized_keys
server% rm ~/.ssh/archive-server.pub
+--

  * <<Access Verification>>

  This setup allows password free logins. To verify SSH access,

    * login <$\{CLIENT\}>

+--
client% ssh ${SERVER}
+--

  

