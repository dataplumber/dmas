~~ Copyright 2008, by the California Institute of Technology.
~~ ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged.
~~
~~ $Id: index.apt 2577 2009-02-03 18:03:50Z thuang $

  ---
  Installation
  ---
  Mike Gangl
  ---

{Installation}

   This document describes how to install and configure the Security Service web application. The following sections can be found in this document:

   * {{{Build_Instructions}Build Instructions}}

{Build Instructions}

   Security Service is a web application that is designed and built with the {{{http://groovy.codehaus.org/}Groovy}} programming language and the {{{http://grails.org/}Grails}} web application framework.  While both these technologies are fully developed on top of {{{http://java.sun.com}Java}} platform, its support from {{{http://maven.apache.org}Maven}} is still a little behind.  The prerequisite for building the Security web application is the Grails web framework must be installed.  Below is the source tree of Security Service distribution

   ** Security Service Configuration
   
   The Security Service sets two parameters in the $APP/conf/BuildConfig.groovy file
   
+--
//These are the ports the security service will start on
//They must also be defined in config.groovy, so the security plugin 
//will know how to forward https requests to https
grails.server.port.http=9196
grails.server.port.https=9197
+--

   These two configurations set the ports on which http and https traffic will flow. All traffic to the security service is forced to go over https, for security reasons.

   The rest of the configuration can be seen and set in the Config.groovy and Datasource.groovy files. The Security Service has several general purpose configurations, deliniated as follows 
   
+--
//sigevent info
gov.nasa.podaac.security.sig.category="TOOL_SECURITY"
gov.nasa.podaac.security.sig.url="http://lanina:8100/sigevent/"
+--
   
	This sets the sig event information for the Security Service
   
+--
security{
	token{
		/*
		 * A job exists to expire tokens after a certain amount of time, which is set in the "Realm".
		 */
		jobStartDelay =5 //seconds before the jobs kickoff
		jobInterval = 900 // second between job. 900 = 15 minutes.
	}
	caching{
		/*
		 * a job exists to purge the cache every so often. This keeps the in memory cache from growing too large.
		 * 
		 */
		jobStartDelay =10 //seconds before the jobs kickoff
		jobInterval = 60 //seconds between the job
		
		/*
		 * Cache specific configuration
		 * The cache is used so we don't keep hammering LDAP/Oracle for consecutive requests for authentication.
		 * It's also used to track requests from ipaddress/realm to lock accounts/prevent denial of service requests.
		 * The parameters are as follows. 
		 */
		cacheTimeLimit = 120 // Time, in minutes, that a cached entry is usable for. 
		misses = 10 // Number of consecutive misses before a user is locked from authenticating
		lockTimeLimit = 15 // Amount of time, in minutes, that a entry is locked from authentication once consecutive misses are hit(Can't authenticate via the service)
	}
	plugins {
		LDAP{
			host = 'ldap://ldap.jpl.nasa.gov:636'
			searchDn = 'ou=personnel,dc=dir,dc=jpl,dc=nasa,dc=gov'
			//group = 'podaac.j1slx.dev'
		}
		DATABASE{
			//no database specific config
		}
//		OTHER{
//		//future plugins/A&A mechanisms (user reg?))	
//		}
	}
}
+--

    The above configurations specify properties for various parts of the Security Service. They are broken down below:

+--
token{
		/*
		 * A job exists to expire tokens after a certain amount of time, which is set in the "Realm".
		 */
		jobStartDelay =5 //seconds before the jobs kickoff
		jobInterval = 900 // second between job. 900 = 15 minutes.
	}
+--

   Tokens are expired after a certain amount of days. jobStartDelay sets how long after startup this job should start checking data. jobInterval is the amount of time, in seconds, between runs of the job.

+--
caching{
		/*
		 * a job exists to purge the cache every so often. This keeps the in memory cache from growing too large.
		 * 
		 */
		jobStartDelay =10 //seconds before the jobs kickoff
		jobInterval = 60 //seconds between the job
		
		/*
		 * Cache specific configuration
		 * The cache is used so we don't keep hammering LDAP/Oracle for consecutive requests for authentication.
		 * It's also used to track requests from ipaddress/realm to lock accounts/prevent denial of service requests.
		 * The parameters are as follows. 
		 */
		cacheTimeLimit = 120 // Time, in minutes, that a cached entry is usable for. 
		misses = 10 // Number of consecutive misses before a user is locked from authenticating
		lockTimeLimit = 15 // Amount of time, in minutes, that a entry is locked from authentication once consecutive misses are hit(Can't authenticate via the service)
	}
+--

   To prevent too many requests to LDAP and the database, we've implemented a caching system. A job exists to clear the cache of entries every so often. It should be run often so the in memory cache doesn't grow too large.

   The cacheTimeLimit is how long an entry can live in the cache. 
   
   Misses is how many consecutive, incorrect attempts at authentication can come from the same IP address.
   
   Lastly, the locktimeLimit is how many minutes an account is locked from authenticating for.

+--
plugins {
		LDAP{
			host = 'ldap://ldap.jpl.nasa.gov:636'
			searchDn = 'ou=personnel,dc=dir,dc=jpl,dc=nasa,dc=gov'
			//group = 'podaac.j1slx.dev'
		}
		DATABASE{
			//no database specific config
		}
//		OTHER{
//		//future plugins/A&A mechanisms (user reg?))	
//		}
	}
+--

   The above information are the plugin parameters for the Verifiers in the Security Service. Currently there are two verifiers, one using LDAP, and one supporting the legacy A&A using the Oracle Database.
  
   The LDAP parameters should not be changed unless KPL changes their LDAP configuration. The Database verifiers have no specific onfiguration other than the Datasources listed below.
 
   ** Security Service Database Connection Configuration
   
   The Data Source configuration information is located in the "grails-app/conf/DataSource.groovy" file.  The configuration is necessary for the Security Service web application to connect to its data catalog, which is the operation registry for this web application.
   
+--
environments {
   development {
      dataSource {
         pooled = true
         driverClassName = "oracle.jdbc.driver.OracleDriver"
         url = "jdbc:oracle:thin:@seadb.jpl.nasa.gov:1526:DAACDEV"
         dialect = "org.hibernate.dialect.Oracle10gDialect"
         username = '${db username}'
         password = '${db password}'

      }
   }

   test {
      dataSource {
         pooled = true
         driverClassName = "oracle.jdbc.driver.OracleDriver"
         url = "jdbc:oracle:thin:@seadb.jpl.nasa.gov:1526:DAACDEV"
         dialect = "org.hibernate.dialect.Oracle10gDialect"
         username = '${db_username}'
         password = '${db_password}'
      }
   }
   
   ...
}
+--
  
   ** Log Configuration

   In $SECURITY-WS-HOME/grails-app/conf/Config.groovy there is a section for the log4j configuration that looks like the following:

+--
// log4j configuration
log4j = {
    // Example of changing the log pattern for the default console
    // appender:
    //
    appenders {
        rollingFile name:'catalinaOut', maxFileSize:102400, fileName:"<FILE PATH>", file:"<FILE PATH>"
        file name: 'stacktrace', file: "<FILE PATH>", layout: pattern(conversionPattern: '%c{2} %m%n')
    }
    root {
        error 'catalinaOut'
        additivity = true
    }
    //appenders {
    //    console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')
    //}


debug  'gov.nasa.podaac.security.server',
		   'grails.app.controller.gov.nasa.podaac.security.server',
		   'grails.app.controllers.gov.nasa.podaac.security.server',
		   'gov.nasa.podaac.security.server.*',
		   'grails.app.service',
		   'grails.app.services',
		   'grails.app.conf',
		   'grails.app.utils',
		   'gov.nasa.tpds.torchws',
		   'grails.app.bootstrap',
		   'grails.app.job',
		   'grails.app.jobs',
		   'grails.app.task',
		   'grails.app.controller',
		   'grails.app.controllers',
		   'grails.app.filter',
		   'grails.app.filters'
    error  'org.codehaus.groovy.grails.web.servlet',  //  controllers
           'org.codehaus.groovy.grails.web.pages', //  GSP
           'org.codehaus.groovy.grails.web.sitemesh', //  layouts
           'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping
           'org.codehaus.groovy.grails.web.mapping', // URL mapping
           'org.codehaus.groovy.grails.commons', // core / classloading
           'org.codehaus.groovy.grails.plugins', // plugins
           'org.codehaus.groovy.grails.orm.hibernate', // hibernate integration
           'org.springframework',
           //'org.hibernate',
		   'org.hibernate.tool.hbm2ddl',
           'net.sf.ehcache.hibernate'

    warn   'org.mortbay.log'}
+--

   The appenders must be changed to log to a more suitable location for dev, test and ops. 

   ** Memory Configuration
   
   The default JavaVM memory allocation by JBoss may not be sufficient.  It is recommended to increase the PermGen memory space.  This memory space is used for dynamically loading of Java classes.
   
+--
% setenv JAVA_OPTS "-Xms128m -Xmx512m -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 -XX:PermSize=256m -XX:MaxPermSize=512m"
+--
   
   * Create and Deploy the Web Application
   
   After modifying and loading the target environment information, building the Manager web application should be followed.
   
   ** Grails Environment

   Before begin the Maven build, the GRAILS_HOME environment variable must be set.

+--
% setenv GRAILS_HOME /usr/local/grails
+--
   
   ** Copy the Dependencies
   
   Since a WAR (Web ARchive) is a self-contained component, it must be bundled with its own collection of dependencies.
   
+--
% mvn dependency:copy-dependencies
+--
   
   The command above will download the required JARs to the '<target/dependency>' directory

+--
% cp target/dependency/* lib
+--      

   Grails expects all of its dependencies in the '<lib>' directory.  The copy command above will satisfy this requirement.

   ** Run as Grails application
   
   Below is the command to start the Manager Grails application.

+--
% grails -Dgrails.env=<GRAILS_ENV> -Dserver.port=<SERVER_PORT> -Dserver.host=<SERVER_HOST> -Drun-app -https
+--

   Here is an example to start the Manager for Development

+--
% grails -Dgrails.env=development -Dserver.port=8090 -Dserver.host=lanina.jpl.nasa.gov -Dinventory.config.file=./inventory.config run-app
+--

   The command above will run the Security WS as Grails application. GRAILS_ENV should be replaced with "test" for testing, and "production" for ops. SERVER_PORT should be replaced with a port number that sigevent should listen to. SERVER_HOST should be replaced with a hostname that sigevent should bind to. Note that it is necessary to open SERVER_HOST:SERVER_PORT to outside in order to allow all clients to access to manager.  
   
   The -Dinventory.config.file points to a file continaing inventory configuration. Currently only the sig event url is in this file, and should be changed for testing and ops deployment. 

   When grails app starts up, it automatically installs the plugins needed. If grails does not ask to install them, following commands can be executed to install he plugins.

+--
% grails install-plugin http://cloud.github.com/downloads/nebolsin/grails-quartz/grails-quartz-0.4.2.zip
+--
      
   ** Assemble the Web Archive <<NOT SUPPORTED FOR CURRENT RELEASE>>

+--
% mvn -Dgrails.env=development compile
+--
   
   The command above will produce a WAR file that is specific to the development environment.  If the '-Dgrails.env' argument is missing, the WAR produced would be for the production environment.  For the test environment, the '-Dgrails.env=test' should be used.
   
   ** Deploy to JBoss <<NOT SUPPORTED FOR CURRENT RELEASE>>
   
   All web component to be serve by JBoss must be installed under '<$JBOSS_HOME/server/<instance>/deploy>' directory.
      
